package com.wonkglorg.docapi.db.daos;

import com.wonkglorg.docapi.common.Resource;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.customizer.BindBean;
import org.jdbi.v3.sqlobject.customizer.BindMethods;
import org.jdbi.v3.sqlobject.statement.*;

import java.nio.file.Path;
import java.util.List;

public interface ResourceFunctions {

    /**
     * Deletes a specific resource and all its related data in ResourceData, Tags and Permissions
     *
     * @param resourcePath the path to the resource
     */
    @SqlUpdate("DELETE FROM Resources WHERE Resources.resource_path = :resourcePath")
    int delete(@Bind("resourcePath") Path resourcePath);

    /**
     * Deletes the indexed data for this resource
     *
     * @param resourcePath the path to the resource
     */
    @SqlUpdate("DELETE FROM FileData WHERE resource_path = :resourcePath")
    void deleteData(@Bind("resourcePath") Path resourcePath);

    /**
     * Retrieves a list of all resources (without its content attached)
     * @return a list of resources or an empty list if there are non
     */
    @SqlQuery("Select * From Resources")
    @UseRowMapper(ResourceMappers.ResourceRowMapper.class)
    List<Resource> findAll();

    /**
     * Finds a resource by its fully Qualified path
     * @param resourcePath the path to search for
     * @return the resource found or null
     */
    @SqlQuery("SELECT * FROM Resources WHERE resource_path = :resourcePath")
    @UseRowMapper(ResourceMappers.ResourceRowMapper.class)
    Resource findByPath(@Bind("resourcePath") Path resourcePath);

    //todo:jmd implement search by antpath
    List<Resource> findByAntPath(String antPath);

    /**
     * Finds all resources with the matching search term in its data
     * @param searchTerm the term to search for
     * @return a list of resources matching the content
     */
    @SqlQuery("""
    CASE 
        WHEN length(:content) < 3
        THEN SELECT resource_path FROM FileData WHERE data LIKE '%' + :content + '%'
        ELSE SELECT resource_path FROM FileData WHERE data MATCH :content
    END;
    """)
    List<Resource> findByContent(@Bind("content") String searchTerm);


    /**
     * Inserts a new resource into the database
     * @param resource the resource to add
     */
    @SqlScript("""
    INSERT INTO Resources(resource_path,created_at,created_by,last_modified_at,last_modified_by,commit_id)
           VALUES(:resourcePath,:createdAt,:createdBy,:lastModifiedAt,:lastModifiedBy,:commitId);
    INSERT INTO FileData(resource_path,data) VALUES(:resourcePath,:data);
    """)
    void insert(@BindMethods Resource resource); //use bind methods instead of bindBean for records as records are not beans

    /**
     * Updates the path of a resource to the new path (automatically updates all relevant paths duo to triggers generated by {@link DatabaseFunctions#setupTriggers()}
     * @param oldPath the path to change
     * @param newPath the path to change it to
     * @return how many rows got updated
     */
    @SqlUpdate("""
    UPDATE Resources
       SET resource_path = :newPath
     WHERE resource_path = :oldPath
    """)
    int updatePath(@Bind("oldPath") Path oldPath, @Bind("newPath") Path newPath);

    @SqlUpdate("""
            UPDATE FileData
               SET data = :data
             WHERE resource_path = :resourcePath;
            """)
    int updateResource(@Bind("resourcePath") Path resourcePath, @Bind("data") String data);


}

