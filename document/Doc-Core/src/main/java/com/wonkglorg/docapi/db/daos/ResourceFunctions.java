package com.wonkglorg.docapi.db.daos;

import com.wonkglorg.docapi.common.Resource;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.customizer.BindMethods;
import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.statement.SqlScript;
import org.jdbi.v3.sqlobject.statement.SqlUpdate;
import org.jdbi.v3.sqlobject.statement.UseRowMapper;

import java.nio.file.Path;
import java.util.List;

public interface ResourceFunctions {

    /**
     * Deletes a specific resource and all its related data in ResourceData, Tags and Permissions
     *
     * @param resourcePath the path to the resource
     */
    @SqlUpdate("DELETE FROM Resources WHERE Resources.resource_path = :resourcePath")
    int delete(@Bind("resourcePath") Path resourcePath);

    /**
     * Deletes the indexed data for this resource
     *
     * @param resourcePath the path to the resource
     */
    @SqlUpdate("DELETE FROM FileData WHERE resource_path = :resourcePath")
    void deleteData(@Bind("resourcePath") Path resourcePath);

    /**
     * Retrieves a list of all resources (without its content attached)
     *
     * @return a list of resources or an empty list if there are non
     */
    @SqlQuery("Select * From Resources")
    @UseRowMapper(ResourceMappers.ResourceRowMapper.class)
    List<Resource> findAll();

    /**
     * Finds a resource by its fully Qualified path
     *
     * @param resourcePath the path to search for
     * @return the resource found or null
     */
    @SqlQuery("SELECT * FROM Resources WHERE resource_path = :resourcePath")
    @UseRowMapper(ResourceMappers.ResourceRowMapper.class)
    Resource findByPath(@Bind("resourcePath") Path resourcePath);

    /**
     * Selects every resource based on antpaths
     *
     * @param antPath the path to search for
     * @return a list of all valid resources (without data)
     */
    @SqlScript("""
            SELECT * FROM Resources WHERE resource_path LIKE :resourcePath
            """)
    List<Resource> findByAntPath(@Bind("resourcePath") Path antPath);

    //todo:jmd method not working yet find out why
    /*
                SELECT *
              FROM FileData
			  JOIN Resources
			    ON FileData.resource_path = Resources.resource_path
             WHERE
              CASE
                WHEN length('ab') >= 3
                  THEN data MATCH 'ab'
                ELSE data LIKE '%' || 'ab' || '%'
             END;


     */
    /**
     * Finds all resources with the matching search term in its data
     *
     * @param searchTerm the term to search for
     * @return a list of resources matching the content
     */
    @SqlQuery("""
            SELECT resource_path, data
              FROM FileData
             WHERE
              CASE
                WHEN length(:searchTerm) >= 3
                  THEN data Match :searchTerm
                ELSE data LIKE '%' || :searchTerm || '%'
             END
            """)
    List<Resource> findByContent(@Bind("searchTerm") String searchTerm);


    /**
     * Inserts a new resource into the database
     *
     * @param resource the resource to add
     */
    @SqlScript("""
            INSERT INTO Resources(resource_path,created_at,created_by,last_modified_at,last_modified_by,commit_id)
                   VALUES(:resourcePath,:createdAt,:createdBy,:lastModifiedAt,:lastModifiedBy,:commitId);
            INSERT INTO FileData(resource_path,data) VALUES(:resourcePath,:data);
            """)
    void insert(@BindMethods Resource resource); //use bind methods instead of bindBean for records as records are not beans

    /**
     * Updates the path of a resource to the new path (automatically updates all relevant paths duo to triggers generated by {@link DatabaseFunctions#setupTriggers()}
     *
     * @param oldPath the path to change
     * @param newPath the path to change it to
     * @return how many rows got updated
     */
    @SqlUpdate("""
            UPDATE Resources
               SET resource_path = :newPath
             WHERE resource_path = :oldPath
            """)
    int updatePath(@Bind("oldPath") Path oldPath, @Bind("newPath") Path newPath);

    @SqlUpdate("""
            UPDATE FileData
               SET data = :data
             WHERE resource_path = :resourcePath;
            """)
    int updateResource(@Bind("resourcePath") Path resourcePath, @Bind("data") String data);


}

