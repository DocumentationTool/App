package com.wonkglorg.doc.core.db.daos;


import com.wonkglorg.doc.core.objects.Resource;
import com.wonkglorg.doc.core.response.DatabaseResponse;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.customizer.BindMethods;
import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.statement.SqlScript;
import org.jdbi.v3.sqlobject.statement.SqlUpdate;
import org.jdbi.v3.sqlobject.statement.UseRowMapper;

import java.nio.file.Path;
import java.sql.SQLException;
import java.util.List;

/**
 * All resource related database functions
 */
public interface ResourceFunctions {

    /**
     * Deletes a specific resource and all its related data in ResourceData, Tags and Permissions
     *
     * @param resourcePath the path to the resource
     */
    @SqlUpdate("DELETE FROM Resources WHERE Resources.resource_path = :resourcePath")
    int deleteResource(@Bind("resourcePath") Path resourcePath) throws SQLException;

    /**
     * Deletes the indexed data for this resource
     *
     * @param resourcePath the path to the resource
     */
    @SqlUpdate("DELETE FROM FileData WHERE resource_path = :resourcePath")
    int deleteData(@Bind("resourcePath") Path resourcePath) throws SQLException;

    /**
     * Retrieves a list of all resources (without its content attached)
     *
     * @return a list of resources or an empty list if there are non
     */
    @SqlQuery("Select * From Resources")
    @UseRowMapper(ResourceMappers.ResourceRowMapper.class)
    List<Resource> getResources() throws SQLException;

    /**
     * Finds a resource by its fully Qualified path
     *
     * @param resourcePath the path to search for
     * @return the resource found or null
     */
    @SqlQuery("SELECT * FROM Resources WHERE resource_path = :resourcePath")
    @UseRowMapper(ResourceMappers.ResourceRowMapper.class)
    Resource findByPath(@Bind("resourcePath") Path resourcePath) throws SQLException;
    
    //todo:jmd method not working yet find out why
    /*
                SELECT *
              FROM FileData
			  JOIN Resources
			    ON FileData.resource_path = Resources.resource_path
             WHERE
              CASE
                WHEN length('ab') >= 3
                  THEN data MATCH 'ab'
                ELSE data LIKE '%' || 'ab' || '%'
             END;
     */
    /**
     * Finds all resources with the matching search term in its data
     *
     * @param searchTerm the term to search for
     * @return a list of resources matching the content
     */
    @SqlQuery("""
            SELECT resource_path, data
              FROM FileData
             WHERE
              CASE
                WHEN length(:searchTerm) >= 3
                  THEN data Match :searchTerm
                ELSE data LIKE '%' || :searchTerm || '%'
             END
            """)
    List<Resource> findByContent(@Bind("searchTerm") String searchTerm) throws SQLException;


    /**
     * Inserts a new resource into the database
     *
     * @param resource the resource to add
     */
    @SqlScript("""
            INSERT INTO Resources(resource_path,created_at,created_by,last_modified_at,last_modified_by,commit_id)
                   VALUES(:resourcePath,:createdAt,:createdBy,:lastModifiedAt,:lastModifiedBy,:commitId);
            INSERT INTO FileData(resource_path,data) VALUES(:resourcePath,:data);
            """)
    void insertResource(@BindMethods Resource resource) throws Exception; //use bind methods instead of bindBean for records as records are not beans

    /**
     * Updates the path of a resource to the new path (automatically updates all relevant paths duo to triggers generated by {@link DatabaseFunctions#setupTriggers()}
     *
     * @param oldPath the path to change
     * @param newPath the path to change it to
     * @return 1 if the table was changed 0 if no change -1 on error
     */
    @SqlUpdate("""
            UPDATE Resources
               SET resource_path = :newPath
             WHERE resource_path = :oldPath
            """)
    int updatePath(@Bind("oldPath") Path oldPath, @Bind("newPath") Path newPath) throws SQLException;

    /**
     * Updates a resources data
     * @param resourcePath the path the resource is at
     * @param data the data to set it to
     * @return 1 if the table was changed 0 if no change, -1 on error
     */
    @SqlUpdate("""
            UPDATE FileData
               SET data = :data
             WHERE resource_path = :resourcePath;
            """)
    int updateResource(@Bind("resourcePath") Path resourcePath, @Bind("data") String data) throws SQLException;


}

