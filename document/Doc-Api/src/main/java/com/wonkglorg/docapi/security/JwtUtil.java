package com.wonkglorg.docapi.security;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

import java.util.Date;
import javax.crypto.SecretKey;

public class JwtUtil {
    private static final SecretKey SECRET_KEY = Jwts.SIG.HS256.key().build();
    private static final long EXPIRATION_TIME = 1000 * 60 * 60L; // 1 hour

	/**
	 * Generates a new JWT Security token for the given user
	 * @param userId the users id
	 * @return a valid token
	 */
    public static String generateToken(String userId) {
        return Jwts.builder()
                .subject(userId)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(SECRET_KEY)
                .compact();
    }

	/**
	 * Retrieves the id from the given token generated by {@link #generateToken(String)}
	 * @param token the token to parse
	 * @return the userid embedded
	 */
    public static String extractUsername(String token) {
        return Jwts.parser()
						.verifyWith(SECRET_KEY)
						.build()
						.parseSignedClaims(token)
						.getPayload()
						.getSubject();
    }

    public static boolean validateToken(String token) {
        try {
            Jwts.parserBuilder().setSigningKey(SECRET_KEY).build().parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}

