// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table Users {
  userID String [primary key]
  group_name String
  created_at timestamp
  created_by String
  last_modified_at timestamp
  last_modified_by String
}

Table Groups {
  groupID String [primary key]
  username String
  role String
  created_at timestamp
  created_by String
  last_modified_at timestamp
  last_modified_by String
}

Table GroupUsers{
  userID String [primary key]
  groupID String [primary key]
}

Table Files {
  fileID integer [primary key]
  name String
  folderID integer 
  created_at timestamp
  created_by String
  last_modified_at timestamp
  last_modified_by String
}

Table Folder  {
  folderID integer [primary key]
  folder_name String
  path_to_folder String
  created_at timestamp
  created_by String
  last_modified_at timestamp
  last_modified_by String
}

Table GroupPermissions {
  permissionID integer [primary key]
  groupID String
  fileID integer
  folderID integer
  type String 
}

Table UserPermissions {
  permissionID integer [primary key]
  userID String
  fileID integer
  folderID integer
  type String 
}




Table AuditLog {
  logID integer [primary key]
  userID String
  action String  // Action type, e.g., 'grant', 'revoke'
  permissionID integer
  timestamp timestamp
  affected_userID String
  affected_groupID String
}

Table Permissions{
  permissionID String [primary key]
  weight int
}

Ref: Users.userID < GroupUsers.userID
Ref: Groups.groupID < GroupUsers.groupID

Ref: Users.userID < UserPermissions.userID
Ref: Groups.groupID < GroupPermissions.groupID

Ref: Files.fileID < UserPermissions.fileID
Ref: Folder.folderID < UserPermissions.folderID

Ref: Files.fileID < GroupPermissions.fileID
Ref: Folder.folderID < GroupPermissions.folderID


Ref: Permissions.permissionID < UserPermissions.type
Ref: Permissions.permissionID < GroupPermissions.type

Ref: Files.folderID > Folder.folderID



-- Create Users table
CREATE TABLE IF NOT EXISTS Users(
    userID TEXT PRIMARY KEY,
    group_name TEXT,
    created_at TIMESTAMP,
    created_by TEXT,
    last_modified_at TIMESTAMP,
    last_modified_by TEXT
);

-- Create Groups table
CREATE TABLE IF NOT EXISTS Groups (
    groupID TEXT PRIMARY KEY,
    username TEXT,
    role TEXT,
    created_at TIMESTAMP,
    created_by TEXT,
    last_modified_at TIMESTAMP,
    last_modified_by TEXT
);

-- Create GroupUsers table (many-to-many relationship between Users and Groups)
CREATE TABLE IF NOT EXISTS GroupUsers (
    userID TEXT,
    groupID TEXT,
    PRIMARY KEY (userID, groupID),
    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (groupID) REFERENCES Groups(groupID)
);

-- Create Files table
CREATE TABLE IF NOT EXISTS Files (
    fileID INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    folderID INTEGER,
    created_at TIMESTAMP,
    created_by TEXT,
    last_modified_at TIMESTAMP,
    last_modified_by TEXT,
    FOREIGN KEY (folderID) REFERENCES Folder(folderID)
);

-- Create Folder table
CREATE TABLE IF NOT EXISTS Folder (
    folderID INTEGER PRIMARY KEY AUTOINCREMENT,
    folder_name TEXT,
    path_to_folder TEXT,
    created_at TIMESTAMP,
    created_by TEXT,
    last_modified_at TIMESTAMP,
    last_modified_by TEXT
);

-- Create GroupPermissions table
CREATE TABLE IF NOT EXISTS GroupPermissions (
    permissionID INTEGER PRIMARY KEY AUTOINCREMENT,
    groupID TEXT,
    fileID INTEGER,
    folderID INTEGER,
    type TEXT,
    FOREIGN KEY (groupID) REFERENCES Groups(groupID),
    FOREIGN KEY (fileID) REFERENCES Files(fileID),
    FOREIGN KEY (folderID) REFERENCES Folder(folderID)
);

-- Create UserPermissions table
CREATE TABLE IF NOT EXISTS UserPermissions (
    permissionID INTEGER PRIMARY KEY AUTOINCREMENT,
    userID TEXT,
    fileID INTEGER,
    folderID INTEGER,
    type TEXT,
    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (fileID) REFERENCES Files(fileID),
    FOREIGN KEY (folderID) REFERENCES Folder(folderID)
);

-- Create Permissions table (for the permission types)
CREATE TABLE IF NOT EXISTS Permissions (
    permissionID TEXT PRIMARY KEY,
    weight INTEGER
);

-- Create AuditLog table
CREATE TABLE IF NOT EXISTS AuditLog (
    logID INTEGER PRIMARY KEY AUTOINCREMENT,
    userID TEXT,
    action TEXT,
    permissionID INTEGER,
    timestamp TIMESTAMP,
    affected_userID TEXT,
    affected_groupID TEXT,
    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (permissionID) REFERENCES UserPermissions(permissionID) ON DELETE CASCADE,
    FOREIGN KEY (permissionID) REFERENCES GroupPermissions(permissionID) ON DELETE CASCADE
);

-- Enable foreign key constraints (optional, but recommended)
PRAGMA foreign_keys = ON;
